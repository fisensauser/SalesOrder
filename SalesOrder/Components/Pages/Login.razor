@page "/login"


@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using SalesOrder.Models
@using SalesOrder.Data;
@using System.Security.Claims
@inject AppDbContext appDbContext;
@inject NavigationManager navManager;



<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
    <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
        <div class="mb-3">
            <label>Username</label>
            <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username" />
            <ValidationMessage For="() => Model.Username" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <InputText @bind-Value="Model.Password" type="password" class="form-control" placeholder="Password" />
            <ValidationMessage For="() => Model.Password" />
        </div>
        <div class="mb-3 text-center">
            <span class="text-danger">@errorMessage</span>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button type="submit" class="btn btn-primary">Login</button>
        </div>
    </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? httpContext { get; set; }

    

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();
    private string? errorMessage;

    private async Task Authenticate()
    {
       
        var user = appDbContext.Users.Where(x => x.UserName == Model.Username && x.Password==Model.Password).FirstOrDefault();
        if (user is null)
        {
            errorMessage = "Invalid username or password";
            return;
        }

        var claims = new List<Claim>()

        {
        new Claim(ClaimTypes.Name, Model.Username)   ,
        new Claim(ClaimTypes.Role, user.Role)
        };
        
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await httpContext.SignInAsync(principal);
        navManager.NavigateTo("/");
        
    }
}
